import ProjectDescription

// MARK: - Workspace Configuration

let workspace = Workspace(
    name: "ClaudeCode",
    projects: [
        "." // Main app project
        // Future modules can be added here:
        // "Modules/Core",
        // "Modules/Networking",
        // "Modules/UI",
        // "Modules/Analytics"
    ],
    schemes: [
        // Workspace-level schemes for cross-project builds
        Scheme.scheme(
            name: "ClaudeCode-All",
            shared: true,
            buildAction: .buildAction(
                targets: [
                    .project(path: ".", target: "ClaudeCode"),
                    .project(path: ".", target: "ClaudeCodeTests"),
                    .project(path: ".", target: "ClaudeCodeUITests")
                ]
            ),
            testAction: .testAction(
                targets: [
                    .testableTarget(
                        target: .project(path: ".", target: "ClaudeCodeTests"),
                        parallelizable: true
                    ),
                    .testableTarget(
                        target: .project(path: ".", target: "ClaudeCodeUITests"),
                        parallelizable: false
                    )
                ],
                options: .options(
                    coverage: true,
                    codeCoverageTargets: [
                        .project(path: ".", target: "ClaudeCode")
                    ]
                )
            ),
            runAction: .runAction(
                executable: .project(path: ".", target: "ClaudeCode")
            )
        ),
        
        // Development scheme with extra debugging options
        Scheme.scheme(
            name: "ClaudeCode-Dev",
            shared: true,
            buildAction: .buildAction(
                targets: [.project(path: ".", target: "ClaudeCode")]
            ),
            runAction: .runAction(
                executable: .project(path: ".", target: "ClaudeCode"),
                arguments: .arguments(
                    environmentVariables: [
                        "DEBUG": .environmentVariable(value: "true", isEnabled: true),
                        "API_BASE_URL": .environmentVariable(value: "http://localhost:8080", isEnabled: true),
                        "LOG_LEVEL": .environmentVariable(value: "debug", isEnabled: true),
                        "NETWORK_LOGGING": .environmentVariable(value: "true", isEnabled: true),
                        "UI_TESTING": .environmentVariable(value: "false", isEnabled: false)
                    ],
                    launchArguments: [
                        .launchArgument(name: "-com.apple.CoreData.SQLDebug", isEnabled: false),
                        .launchArgument(name: "-com.apple.CoreData.Logging.stderr", isEnabled: false),
                        .launchArgument(name: "-FIRDebugEnabled", isEnabled: false),
                        .launchArgument(name: "-FIRAnalyticsDebugEnabled", isEnabled: false)
                    ]
                )
            )
        ),
        
        // Performance profiling scheme
        Scheme.scheme(
            name: "ClaudeCode-Performance",
            shared: true,
            buildAction: .buildAction(
                targets: [.project(path: ".", target: "ClaudeCode")],
                preActions: [],
                postActions: []
            ),
            runAction: .runAction(
                configuration: .release,
                executable: .project(path: ".", target: "ClaudeCode"),
                arguments: .arguments(
                    environmentVariables: [
                        "PERFORMANCE_MONITORING": .environmentVariable(value: "true", isEnabled: true),
                        "MEMORY_PROFILING": .environmentVariable(value: "true", isEnabled: true)
                    ]
                ),
                options: .options(
                    gpuFrameCaptureMode: .autoEnabled,
                    gpuValidationMode: .enabled
                )
            ),
            profileAction: .profileAction(
                configuration: .release,
                executable: .project(path: ".", target: "ClaudeCode"),
                askForAppToLaunch: false
            )
        )
    ],
    additionalFiles: [
        ".tuist-version",
        "Config.swift",
        "README.md",
        ".gitignore",
        "docs/**"
    ],
    generationOptions: .options(
        enableAutomaticXcodeSchemes: false,
        autogeneratedWorkspaceSchemes: .disabled,
        renderMarkdownReadme: true
    )
)